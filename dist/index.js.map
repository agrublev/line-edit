{"version":3,"sources":["src/helpers.js","src/index.js","src/editor.js","index.js"],"names":["boxInform","message","secondary","rest","console","log","chalk","hex","bold","underline","padding","margin","left","top","bottom","right","borderStyle","topLeft","topRight","bottomLeft","bottomRight","horizontal","vertical","align","enable","choices","fn","forEach","ch","enabled","run","question","red","Promise","resolve","prompt","type","name","then","answer","snippet","Select","header","footer","colors","dim","limit","catch","error","form","formTem","Snippet","template","result","multiSelect","chociues","initial","selected","disabled","MultiSelect","choiceMessage","state","choice","green","indicator","gray","mSelect","mSelect2","white","bgBlack","hint","italic","onChoice","i","index","keypress","role","symbols","LineByLineReader","require","path","lineReplace","filePath","join","__dirname","readTheLine","f","n","count","lr","encoding","skipEmptyLines","on","err","line","e","info","module","exports","file","varName","lineText","text","addNewLine","callback","replacedText","argv","process","stdout","write","bgWhite","Date"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["import boxen from \"boxen\";\nimport chalk from \"chalk\";\n\nexport const boxInform = async ({ message = \"\", secondary = \"\", ...rest }) => {\n    console.log(\n        boxen(\n            chalk.hex(\"#717877\")(\" \") +\n                chalk.bold.underline.hex(\"#438b34\")(message) +\n                chalk.hex(\"#717877\")(\" \") +\n                chalk.hex(\"#717877\")(secondary ? \"\\n\" + secondary : \"\"),\n            {\n                padding: 0,\n                margin: { left: 2, top: 0, bottom: 0, right: 0 },\n                borderStyle: {\n                    topLeft: chalk.hex(\"#5a596d\")(\"╔\"),\n                    topRight: chalk.hex(\"#5a596d\")(\"╗\"),\n                    bottomLeft: chalk.hex(\"#5a596d\")(\"╚\"),\n                    bottomRight: chalk.hex(\"#5a596d\")(\"╝\"),\n                    horizontal: chalk.hex(\"#5a596d\")(\"═\"),\n                    vertical: chalk.hex(\"#5a596d\")(\"║\")\n                }, //\"round\",\n                align: \"center\",\n                ...rest\n            }\n        )\n    );\n};\n","import chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport { MultiSelect, Snippet, Select } from \"enquirer\";\nimport { boxInform } from \"./helpers\";\n// import yosay from \"yosay\";\nimport colors from \"ansi-colors\";\nconst enable = (choices, fn) => choices.forEach(ch => (ch.enabled = fn(ch)));\n\nexport const run = async ({ question, ...rest }) => {\n    console.log(chalk.bold.red(\"starti2asd22ng...\"));\n    return new Promise(resolve => {\n        inquirer\n            .prompt({\n                type: `text`,\n                name: `answer`,\n                message: question + \": \",\n                ...rest\n            })\n            .then(({ answer }) => {\n                resolve(answer);\n            });\n    });\n};\n\nexport const snippet = async ({ question, ...rest }) => {\n    const prompt = new Select({\n        name: \"color\",\n        message: \"Pick a color\",\n        header: boxInform({\n            message: \"welcome\",\n            secondary: \"tohelll\",\n            padding: { left: 4, top: 0, bottom: 0, right: 4 }\n        }), //chalk.bold.red(\"Welcome to my awesome generator!\"),\n        footer: colors.dim(\"(Scroll up and down to reveal more choices)\"),\n        limit: 5,\n        choices: [\"aqua\", \"black\", \"blue\", \"fuchsia\", \"gray\", \"green\"]\n    });\n    return new Promise(resolve => {\n        prompt\n            .run()\n            .then(answer => {\n                console.log(\"Answer:\", answer);\n                resolve(answer);\n            })\n            .catch(console.error);\n    });\n};\n\nexport const form = async ({ question, ...rest }) => {\n    // console.log(chalk.bold.red(\"starti2asd22ng...\"));\n\n    const formTem = new Snippet({\n        name: \"username\",\n        message: \"Please add the following config values\",\n        template: `\n      First Name: #{first_name}\n       Last Name: #{last_name}\n GitHub username: #{username}\n`\n    });\n    return new Promise(resolve => {\n        formTem\n            .run()\n            .then(answer => {\n                // console.log(\"Answer:\", answer.result);\n                resolve(answer.result);\n            })\n            .catch(console.error);\n    });\n};\n\nexport const multiSelect = async ({ question, ...rest }) => {\n    let chociues = [\n        { name: \"lasagna\", message: \"Lasagna\", initial: \"yes\", selected: true, enabled: true },\n        { name: \"pizza\", message: \"Pizza\" },\n        { name: \"aapizza\", message: \"aaPizza\", disabled: true },\n        { name: \"chicken_curry\", message: \"Chicken Curry\" },\n        { name: \"tacos\", message: \"Tacos\" }\n    ];\n    const mSelect = new MultiSelect({\n        name: \"food\",\n        message: \"What are your favorite foods?\",\n        choiceMessage(state, choice) {\n            if (chociues[choice].enabled) {\n                return chalk.green(chociues[choice].name);\n            }\n            return chalk.red(chociues[choice].name);\n        },\n        indicator(state, choice) {\n            if (choice.enabled) {\n                return chalk.green.bold(\"◉\");\n            }\n            return chalk.dim.gray(\"◯\");\n        },\n        choices: chociues\n    });\n\n    const mSelect2 = new MultiSelect({\n        name: \"example-groups\",\n        message: \"What packages do you want to install?\",\n        indicator(state, choice) {\n            if (choice.enabled) {\n                return chalk.green.bold(\"◉\");\n            }\n            return chalk.dim.white.bgBlack(\"◯\");\n        },\n        choices: [\n            {\n                name: \"dependencies\",\n                choices: [{ name: \"ansi-colors\", hint: \"Good description\" }, { name: \"picomatch\" }]\n            },\n            { name: \"devDependencies\", choices: [\"kind-of\", \"enquirer\"] }\n        ]\n    });\n\n    const mSelect3 = new MultiSelect({\n        name: \"food\",\n        message: \"What are your favorite foods?\",\n        choices: [\n            {\n                name: \"all\",\n                message: colors.italic(\"All\"),\n                onChoice(state, choice, i) {\n                    if (state.index === i && choice.enabled) {\n                        enable(state.choices, ch => ch.name !== \"none\");\n                    }\n                }\n            },\n            {\n                name: \"none\",\n                message: colors.italic(\"None\"),\n                onChoice(state, choice, i) {\n                    if (state.index === i) {\n                        if (choice.enabled) {\n                            enable(state.choices, ch => ch.name === \"none\");\n                        }\n                    }\n                    if (state.keypress && state.keypress.name === \"a\") choice.enabled = false;\n                    if (state.index !== i && state.choices[state.index].enabled === true) {\n                        choice.enabled = false;\n                    }\n                }\n            },\n            { role: \"separator\" },\n            { name: \"lasagna\", message: \"Lasagna\" },\n            { name: \"pizza\", message: \"Pizza\" },\n            { name: \"chicken_curry\", message: \"Chicken Curry\" },\n            { name: \"tacos\", message: \"Tacos\" }\n        ],\n        symbols: { indicator: \"❤\" },\n        indicator(state, choice) {\n            let style = choice.enabled ? colors.red : colors.dim.gray;\n            return style(state.symbols.indicator);\n        }\n    });\n\n    return new Promise(resolve => {\n        mSelect2\n            .run()\n            .then(answer => {\n                console.log(\"Answer:\", answer);\n\n                resolve(answer);\n            })\n            .catch(console.error);\n    });\n};\n\n// module.exports = { run, snippet };\n","const LineByLineReader = require(\"line-by-line\");\n\nconst path = require(\"path\");\nconst lineReplace = require(\"line-replace\");\n\nlet filePath = path.join(__dirname, \"./testFoo.js\");\n\nconst readTheLine = async function(f, n) {\n    return new Promise(resolve => {\n        let count = 1;\n        // process.stdout.write(\"\\x1b[2J\");\n        // process.stdout.write(\"\\x1b[0f\");\n        const lr = new LineByLineReader(f, {\n            encoding: \"utf8\",\n            skipEmptyLines: false\n            // start: 10,\n            // end: 15\n        });\n\n        lr.on(\"error\", function(err) {\n            console.error(\"-- Console ER\", err);\n            // 'err' contains error object\n        });\n\n        lr.on(\"line\", function(line) {\n            if (count === n) {\n                resolve(line);\n            }\n            count++;\n            // 'line' contains the current line without the trailing newline character.\n        });\n\n        lr.on(\"end\", function(e) {\n            console.info(\"-- Console e\", e);\n            // All lines are read, file is closed now.\n        });\n    });\n};\n\nmodule.exports = async ({ file, line, selected, varName }) => {\n    const lineText = await readTheLine(file, line);\n    return new Promise(resolve => {\n        lineReplace({\n            file: file,\n            line: line,\n            text: `console.warn(\"LineEdit: \",${selected || varName});\\n${lineText}`,\n            addNewLine: true,\n            callback: ({ file, line, text, replacedText }) => {\n                resolve();\n            }\n        });\n    });\n};\n","// #!/usr/bin/env node\nconst argv = require(\"yargs\").argv;\nimport { run, snippet, multiSelect, form } from \"./src/index.js\";\nimport editor from \"./src/editor\";\nimport chalk from \"chalk\";\n\nprocess.stdout.write(\"\\x1b[2J\");\nprocess.stdout.write(\"\\x1b[0f\");\nconsole.log(`${chalk.gray.bgWhite(\"Updated \" + new Date())}`);\n\n(async function() {\n    // console.log(chalk.green(\"Starting...\"));\n    //\n    // // let aa = await run({ question: \"HOW IS IT\" });\n    // // let aas = await snippet({ question: \"HOW IS IT\" });\n    // let aas = await multiSelect({ question: \"HssIS IT\" });\n    // // console.warn(\"-- Console UIT US\", aas);\n    // // let aas = await form({ question: \"HOW IS IT\" });\n    //\n    // console.warn(\"-- Console UIT US\", aas);\n    //--file=$FilePath$ --line=$LineNumber$ --selected=$SelectedText$ --extra=$Prompt$\n    // if (argv.ships > 3 && argv.distance < 53.5) {\n    //     console.log(\"Plunder more riffiwobbles!\");\n    // } else {\n    //     console.log(\"Retreat from the xupptumblers!\");\n    // }\n    const { file, line, selected = \"\", varName = \"\" } = argv;\n    await editor({ file, line, selected, varName });\n})();\n"]}